### IC50 spalte an results anf?gen -> drug_activity_rges
##loading data
library(reshape)
wd = dirname(rstudioapi::getSourceEditorContext()$path)
results = readRDS(paste0(wd, "/data/results.RDS"))
ic50 = readRDS(paste0(wd, "/data/NegLogGI50.RDS"))
meta = read.delim(paste0(wd, "/data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t")
##melt function
ic50 = t(ic50)
melt.data <- melt(ic50)
melt.data = as.matrix(melt.data)
melt.ic50 = as.data.frame(melt.data)
colnames(melt.ic50) = c("cell", "drug", "IC50")
##remove NAs
rmv.rows = apply(melt.data, 1, function(x) {
sum(is.na(x))
})
which(rmv.rows > 0)
melt.ic50 = melt.data[-which(rmv.rows > 0),]
rm(melt.data)
##Cellines der IC50 aussortieren um sie an RGES_results anpassen
IC50.value = c(rep(as.numeric(0),819))
results = cbind(results, IC50.value)
i=1
j=1
while(i<895)
{while(j<820)
{
if(isTRUE(melt.ic50[i,1]== results[j,4])
& (melt.ic50[i,2] == results[j,5]))
{results[j,9] = as.numeric(melt.ic50[i,3])
}
j = j +1
}
j= 1
i=i+1}
which(results$IC50.value == 0)
drug_activity_rges = results[-which(results$IC50.value == 0),]
saveRDS(drug_activity_rges, file = "drug_activity_rges.rds")
# limit data set to numerical values
rges.ic50 <- as.data.frame(drug_activity_rges[,c(2,9)])
# compute correlation
cor(rges.ic50$RGES, rges.ic50$IC50.value, method = "spearman")
# check significance
cor.test(rges.ic50$RGES, rges.ic50$IC50.value, method = "spearman")
#plot correlation
library(ggplot2)
ggplot(rges.ic50, aes(rges.ic50$RGES, rges.ic50$IC50.value)) +
geom_point(color = "blue", size = 1) +
scale_size(range = c(2,5)) +
xlab("RGES") +
ylab("IC50 [nm]") +
xlim(0.1,0.25)+
ylim(-1e+09,0.2e+09)
# univariate regression model
# split data set in test and training set
# take 200 random samples to form the training set
i.train = sample(1:nrow(rges.ic50), 730)
rges.ic50.train = rges.ic50[i.train, ]
rges.ic50.test = rges.ic50[-i.train, ]
#learn lm on training set
lm.rges_ic50 = lm(IC50.value ~ RGES, data = rges.ic50.train)
summary(lm.rges_ic50)
# normal distribution of residuals?
plot(lm.rges_ic50, which = c(1), pch=20, col="blue", main = "Scatter plot Residuals - Fitted values")
plot(lm.rges_ic50, which = c(2), pch=20, col="blue", main = "QQ plot Residuals")
## correlation residuals x-values?
cor(rges.ic50.train$RGES, lm.rges_ic50$residuals)
# use model to predict ic50 by rges
pred = predict(lm.rges_ic50, newdata = rges.ic50.test)
plot(rges.ic50.test$IC50.value, pred, xlab = "Real Values", ylab = "Predicted Values", pch=20, col="blue")
abline(0, 1, col = "red")
#compute RMSE, check validility
n = nrow(rges.ic50.train)
rmse.train = sqrt(1/n * sum(lm.rges_ic50$residuals^2))
n = nrow(rges.ic50.test)
residuals = rges.ic50.test$IC50.value - pred
rmse.test = sqrt(1/n * sum(residuals^2))
#Multiple Regression
# 1. Include biomarkers to RGES matrix only for cisplatin!
double.biomarker.FC = readRDS(paste0(wd, "/data/double.biomarker.FC.RDS"))
drug_activity_rges.cisplatin = subset (drug_activity_rges , drug == "cisplatin")
# samples as rows
biomarker.FC = t(double.biomarker.FC)
# fit both matrices
biomarker.FC.fit = subset(biomarker.FC, rownames(biomarker.FC) %in% drug_activity_rges.cisplatin$sample)
# limit the data set to numerical values: rges, ic50 and biomarkers:
rges.ic50.biomarkers <- as.data.frame(cbind(drug_activity_rges.cisplatin[,c(2,9)], biomarker.FC.fit))
# correlation between biomarkers, rges and ic50 is visualized
# produce pairwise scatter plots
pairs(rges.ic50.biomarkers, col = "blue", pch = 20, main = "Scatterplots RGES, IC50, Biomarkers")
## matrix of correlations
cor.mat = cor(rges.ic50.biomarkers, method = "spearman")
heatmap(cor.mat, col = cm.colors(256), symm = T, main = "Correlation Heatmap RGES, IC50 and Biomarkers")
# multiple regression model
# create training and test set
train.multiple = sample(1:nrow(rges.ic50.biomarkers), 45)
train.set.multiple = rges.ic50.biomarkers[train.multiple, ]
test.set.multiple = rges.ic50.biomarkers[-train.multiple, ]
# learn model, all data included
model.multiple = lm(IC50.value ~ ., data = train.set.multiple)
summary(model.multiple)
# prove residuals
plot(model.multiple, which = c(1), col="blue", pch = 20, main = "Scatterplot Residuals - Fitted values")
plot(model.multiple, which = c(2), col="blue", pch = 20, main = "QQ plot Residuals")
cor(rges.ic50.train[,-2], lm.rges_ic50$residuals)
# predict ic50
predict.multiple = predict(model.multiple, newdata = test.set.multiple)
plot(test.set.multiple$IC50.value, predict.multiple, xlab = "Real Values", ylab = "Predicted Values", pch=20, col="blue")
abline(0, 1, col = "red")
#computation of RMSE
n = nrow(train.set.multiple)
rmse.train = sqrt(1/n * sum(model.multiple$residuals^2))
n = nrow(test.set.multiple)
residuals = test.set.multiple$IC50.value - predict.multiple
rmse.test = sqrt(1/n * sum(residuals^2))
rmse.train
rmse.test
# 2. model with specific biomarkers (PTPRG, COMMD10, GMDS, LRBA)
#same training and test set is used
model.multiple.biomarkers = lm(IC50.value ~ PTPRG + COMMD10 + GMDS + LRBA, data = train.set.multiple)
summary(model.multiple.biomarkers)
# prove residuals
plot(model.multiple.biomarkers, which = c(1), col = "blue", pch = 20, main = "Scatterplot Residuals - Fitted values")
plot(model.multiple.biomarkers, which = c(2), col = "blue", pch = 20, main = "QQ plot Residuals")
# predict ic50
predict.biomarkers = predict(model.multiple.biomarkers, newdata = test.set.multiple)
plot(test.set.multiple$IC50.value, predict.biomarkers, xlab = "Real Values", ylab = "Predicted Values", pch=20, col="blue")
abline(0, 1, col = "red")
# compute RMSE
n = nrow(train.set.multiple)
rmse.train = sqrt(1/n * sum(model.multiple.biomarkers$residuals^2))
n = nrow(test.set.multiple)
residuals = test.set.multiple$IC50.value - predict.biomarkers
rmse.test = sqrt(1/n * sum(residuals^2))
# for a better model, pca can be used
pca = prcomp(rges.ic50.biomarkers[, -2])
barplot(pca$rotation[, 1], horiz = TRUE, main = "PC1", col = "lightblue", las=1)
# compute model with pcas instead of original variables
model.pca = lm(rges.ic50.biomarkers$IC50.value ~ pca$x)
summary(model.pca)
plot(model.pca, which = c(1), col = "blue", pch = 20, main = "Scatterplot Residuals - Fitted values")
plot(model.pca, which = c(2), col = "blue", pch = 20, main = "QQ plot Residuals")
# do the PCs correlate?
cor.pca = cor(pca$x)
heatmap(cor.pca, col = cm.colors(256), main = "Heatmap Correlation PCs")
# would it be better to redo the model with only a few of PCs?
plot(pca, type ="lines", main = "Elbow plot of PCA")
?size
?fig.scap
?fig.scap
drug_activity_rges <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/drug_activity_rges.rds")
## packages
library(rstudioapi)
library(gplots)
library(pheatmap)
library(viridis)
## necessary data from the general analysis
wd = dirname(rstudioapi::getSourceEditorContext()$path)
meta = read.delim(paste0(wd, "/data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t")
untreated = readRDS(paste0(wd, "/data/NCI_TPW_gep_untreated.RDS"))
treated = readRDS(paste0(wd, "/data/NCI_TPW_gep_treated.RDS"))
copynumber = readRDS(paste0(wd, "/data/CCLE_copynumber.RDS"))
cellline = read.delim(paste0(wd, "/data/cellline_annotation.tsv"), header = TRUE, sep = "\t")
#scale
treated.scaled <- scale(treated)
untreated.scaled <- scale(untreated)
#FC
log2FC.treated.untreated <- (treated.scaled-untreated.scaled) #values are already log2 transformed
is.nan.data.frame <- function(x)      #NaN durch 0 ersetzen
do.call(cbind, lapply(x, is.nan))
log2FC.treated.untreated[is.nan(log2FC.treated.untreated)] <- 0
##Specific analysis
## Step 1 (a)
#Find Biomarker for cisplatin through FC (criterium 1)
cisplatin.col=c()
j=1
while(j<820)
{
if(isTRUE(meta[j,3]== "cisplatin"))
{cisplatin.col= c(cisplatin.col,j)
}
j = j +1
}
FC.cisplatin = log2FC.treated.untreated[,cisplatin.col]
mean.FC.genes <- apply(FC.cisplatin, 1, mean)
mean.FC.celllines <- apply(FC.cisplatin, 2, mean)
#removing unnecessary data, functions...
rm(cisplatin.col, j, is.nan.data.frame, treated, untreated, log2FC.treated.untreated)
#standard deviation cisplatin
sd.cisplatin = apply(FC.cisplatin, 1, sd)
mean.FC.genes.sd = as.data.frame(cbind(mean.FC.genes, sd.cisplatin))
mean.FC.ordered = mean.FC.genes.sd[order(mean.FC.genes.sd$mean.FC.genes, decreasing=TRUE), ]
plot(density(sd.cisplatin))
#finding/visualizing most extreme FC values for cisplatin
lowest.FC = mean.FC.ordered[13280:13299,]
par(mar = c(5, 7, 5, 3))
barplot(lowest.FC$mean.FC.genes,
horiz = TRUE,
xlim = c(-1.0, 0),
main= "lowest log2 FC-values for cisplatin",
xlab= "mean log2FC values in different celllines",
names.arg = rownames(lowest.FC),
col= "firebrick",
las=1,
border = "white",
cex.names =0.8)
highest.FC = mean.FC.ordered[1:20,]
par(mar = c(5, 10, 5, 3))
barplot(highest.FC$mean.FC.genes,
horiz = TRUE,
xlim = c(0, 1),
main= "highest log2 FC-values for cisplatin",
xlab= "mean log2FC values in different celllines",
names.arg = rownames(highest.FC),
col= "lightgreen",
las=1,
border = "white",
cex.names =0.8)
#matrix containing the biomarker found through the FC
highest.FC = as.matrix(highest.FC)
lowest.FC = as.matrix(lowest.FC)
biomarker1.FC = as.matrix(rbind(highest.FC, lowest.FC))
highest.names <- row.names(highest.FC)
lowest.names <- row.names(lowest.FC)
row.names(biomarker1.FC) <- c(highest.names, lowest.names)
biomarker1 <- c(highest.names, lowest.names)
#sort out biomarker that don?t change in the same "direction" for most cell lines
is.neg = FC.cisplatin<0
i =1
j=1
a=1
biomarker2.up = c()
biomarker2.down = c()
while(j<13300){
while(i<56){
if(is.neg[j,i]==TRUE)
{a=a+1}
i=i+1}
if(a>49)
{biomarker2.down= c(biomarker2.down, j)}
if(a<6)
{biomarker2.up= c(biomarker2.up, j)}
a=1
i=1
j=j+1}
#das sind jetzt die nrow von Genen dich sich unter cisplatin
#in 50 von 55 Faellen in die gleiche Richtung veraendern
biomarker2 = row.names(FC.cisplatin[c(biomarker2.down, biomarker2.up),])
#do we find the same biomarkers for cisplatin with both criteria?
i=1
j=1
a=1
double.biomarker = c()
while(i<41)
{
while(j<375)
{
if(isTRUE(biomarker2[j] == biomarker1[i]))
{double.biomarker = c(double.biomarker, biomarker1[a])
}
j = j +1
}
j= 1
i=i+1
a=a+1
}
rm(is.neg, a, i, j, biomarker2.down, biomarker2.up, highest.names, lowest.names)
## Step 1 (b)
# ttest to verify significance of the biomarker
#Creating seperated matrices containing cisplatin
treated.cisplatin <- treated.scaled[,grep ("cisplatin", colnames(treated.scaled))]
untreated.cisplatin <- untreated.scaled[,grep("cisplatin", colnames(treated.scaled))]
## necessary data from the general analysis
wd = dirname(rstudioapi::getSourceEditorContext()$path)
meta = read.delim(paste0(wd, "/data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t")
untreated = readRDS(paste0(wd, "/data/NCI_TPW_gep_untreated.RDS"))
treated = readRDS(paste0(wd, "/data/NCI_TPW_gep_treated.RDS"))
copynumber = readRDS(paste0(wd, "/data/CCLE_copynumber.RDS"))
cellline = read.delim(paste0(wd, "/data/cellline_annotation.tsv"), header = TRUE, sep = "\t")
#scale
treated.scaled <- scale(treated)
untreated.scaled <- scale(untreated)
#FC
log2FC.treated.untreated <- (treated.scaled-untreated.scaled) #values are already log2 transformed
is.nan.data.frame <- function(x)      #NaN durch 0 ersetzen
do.call(cbind, lapply(x, is.nan))
log2FC.treated.untreated[is.nan(log2FC.treated.untreated)] <- 0
##Specific analysis
## Step 1 (a)
#Find Biomarker for cisplatin through FC (criterium 1)
cisplatin.col=c()
j=1
while(j<820)
{
if(isTRUE(meta[j,3]== "cisplatin"))
{cisplatin.col= c(cisplatin.col,j)
}
j = j +1
}
FC.cisplatin = log2FC.treated.untreated[,cisplatin.col]
mean.FC.genes <- apply(FC.cisplatin, 1, mean)
mean.FC.celllines <- apply(FC.cisplatin, 2, mean)
#finding/visualizing most extreme FC values for cisplatin
lowest.FC = mean.FC.ordered[13280:13299,]
highest.FC = mean.FC.ordered[1:20,]
#standard deviation cisplatin
sd.cisplatin = apply(FC.cisplatin, 1, sd)
mean.FC.genes.sd = as.data.frame(cbind(mean.FC.genes, sd.cisplatin))
mean.FC.ordered = mean.FC.genes.sd[order(mean.FC.genes.sd$mean.FC.genes, decreasing=TRUE), ]
lowest.FC = mean.FC.ordered[13280:13299,]
highest.FC = mean.FC.ordered[1:20,]
#matrix containing the biomarker found through the FC
highest.FC = as.matrix(highest.FC)
lowest.FC = as.matrix(lowest.FC)
biomarker1.FC = as.matrix(rbind(highest.FC, lowest.FC))
highest.names <- row.names(highest.FC)
lowest.names <- row.names(lowest.FC)
row.names(biomarker1.FC) <- c(highest.names, lowest.names)
biomarker1 <- c(highest.names, lowest.names)
#sort out biomarker that don?t change in the same "direction" for most cell lines
is.neg = FC.cisplatin<0
i =1
j=1
a=1
biomarker2.up = c()
biomarker2.down = c()
while(j<13300){
while(i<56){
if(is.neg[j,i]==TRUE)
{a=a+1}
i=i+1}
if(a>49)
{biomarker2.down= c(biomarker2.down, j)}
if(a<6)
{biomarker2.up= c(biomarker2.up, j)}
a=1
i=1
j=j+1}
#das sind jetzt die nrow von Genen dich sich unter cisplatin
#in 50 von 55 Faellen in die gleiche Richtung veraendern
biomarker2 = row.names(FC.cisplatin[c(biomarker2.down, biomarker2.up),])
#do we find the same biomarkers for cisplatin with both criteria?
i=1
j=1
a=1
double.biomarker = c()
while(i<41)
{
while(j<375)
{
if(isTRUE(biomarker2[j] == biomarker1[i]))
{double.biomarker = c(double.biomarker, biomarker1[a])
}
j = j +1
}
j= 1
i=i+1
a=a+1
}
View(log2FC.treated.untreated)
View(double.biomarker)
names(double.biomarker)
rownames(double.biomarker)
FC.neu = subset(log2FC.treated.untreated, rownames(log2FC.treated.untreated) %in% double.biomarker)
dim(FC.neu)
dim(log2FC.treated.untreated)
FC.neu.1 = log2FC.treated.untreated[-which(rownames(log2FC.treated.untreated) %in% double.biomarker,)
.
FC.neu.1 = log2FC.treated.untreated[-which(rownames(log2FC.treated.untreated) %in% double.biomarker),]
dim(FC.neu.1)
dim(log2FC.treated.untreated)
double.biomarker.FC = FC.cisplatin[double.biomarker,]
pvalues.welch <- sapply(double.biomarker, function(x){
t.test(double.biomarker.FC[x,], FC.neu.1[x,],paired= F)$p.value
})
pvalues.welch <- sapply(double.biomarker, function(x){
t.test(double.biomarker.FC[x,], FC.neu.1[x,])$p.value
})
View(pvalues.welch)
pvalues.welch <- sapply(double.biomarker.FC, function(x){
t.test(double.biomarker.FC[x,], FC.neu.1[x,])$p.value
})
pvalues.welch <- sapply(double.biomarker.FC, function(x){
function(y){
t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value
}})
View(pvalues.welch)
pvalues.welch <- sapply(double.biomarker.FC, function(x){
function(y){
pval <- t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value
return(pval)
}})
View(pvalues.welch)
pvalues.welch <- sapply(double.biomarker, function(x){
function(y){
pval <- t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value
return(pval)
}})
View(pvalues.welch)
pvalues.welch <- sapply(double.biomarker, function(x){
pval <- sapply(rownames(FC.neu.1, function(y)){
t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value
return(pval)
}}))
pvalues.welch = sapply(rownames(double.biomarker.FC), function(x) {
sapply(rownames(FC.neu.1, function(y) {
t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value
)}
)}
pvalues.welch = sapply(rownames(double.biomarker.FC), function(x) { sapply(rownames(FC.neu.1, function(y) {t.test(double.biomarker.FC[x,], FC.neu.1[y,])$p.value )} )}
library(reshape)
wd = dirname(rstudioapi::getSourceEditorContext()$path)
results = readRDS(paste0(wd, "/data/results.RDS"))
ic50 = readRDS(paste0(wd, "/data/NegLogGI50.RDS"))
meta = read.delim(paste0(wd, "/data/NCI_TPW_metadata.tsv"), header = TRUE, sep = "\t")
##melt function
ic50 = t(ic50)
melt.data <- melt(ic50)
melt.data = as.matrix(melt.data)
melt.ic50 = as.data.frame(melt.data)
colnames(melt.ic50) = c("cell", "drug", "IC50")
##remove NAs
rmv.rows = apply(melt.data, 1, function(x) {
sum(is.na(x))
})
which(rmv.rows > 0)
melt.ic50 = melt.data[-which(rmv.rows > 0),]
rm(melt.data)
##Cellines der IC50 aussortieren um sie an RGES_results anpassen
IC50.value = c(rep(as.numeric(0),819))
results = cbind(results, IC50.value)
i=1
j=1
while(i<895)
{while(j<820)
{
if(isTRUE(melt.ic50[i,1]== results[j,4])
& (melt.ic50[i,2] == results[j,5]))
{results[j,9] = as.numeric(melt.ic50[i,3])
}
j = j +1
}
j= 1
i=i+1}
which(results$IC50.value == 0)
drug_activity_rges = results[-which(results$IC50.value == 0),]
drug_activity_rges.cisplatin = subset (drug_activity_rges , drug == "cisplatin")
biomarker.FC = t(double.biomarker.FC)
double.biomarker.FC = readRDS(paste0(wd, "/data/double.biomarker.FC.RDS"))
biomarker.FC = t(double.biomarker.FC)
biomarker.FC.fit = subset(biomarker.FC, rownames(biomarker.FC) %in% drug_activity_rges.cisplatin$sample)
rges.ic50.biomarkers <- as.data.frame(cbind(drug_activity_rges.cisplatin[,c(2,9)], biomarker.FC.fit))
View(rges.ic50.biomarkers)
knitr::opts_chunk$set(echo = TRUE)
results = readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/results.rds")
ic50 = readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/NegLogGI50.rds")
meta = read.delim("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/NCI_TPW_metadata.tsv")
library(reshape)
library(ggplot2)
# Create vector IC50 values
ic50 = t(ic50)
melt.data <- melt(ic50)
melt.data = as.matrix(melt.data)
melt.ic50 = as.data.frame(melt.data)
colnames(melt.ic50) = c("cell", "drug", "IC50")
# Remove NAs
rmv.rows = apply(melt.data, 1, function(x) {
sum(is.na(x))
})
which(rmv.rows > 0)
melt.ic50 = melt.data[-which(rmv.rows > 0),]
rm(melt.data)
# Adjust cell lines of IC50 vector
IC50.value = c(rep(as.numeric(0),819))
results = cbind(results, IC50.value)
i=1
j=1
while(i<895)
{while(j<820)
{
if(isTRUE(melt.ic50[i,1]== results[j,4])
& (melt.ic50[i,2] == results[j,5]))
{results[j,9] = as.numeric(melt.ic50[i,3])
}
j = j +1
}
j= 1
i=i+1}
which(results$IC50.value == 0)
# Define new matrix
drug_activity_rges = results[-which(results$IC50.value == 0),]
#Multiple Regression
# Include biomarkers to RGES matrix only for cisplatin!
double.biomarker.FC <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/double.biomarker.FC.rds")
drug_activity_rges.cisplatin = subset (drug_activity_rges , drug == "cisplatin")
# transformieren, damit samples in zeile
biomarker.FC = t(double.biomarker.FC)
# fit both matrices
biomarker.FC.fit = subset(biomarker.FC, rownames(biomarker.FC) %in% drug_activity_rges.cisplatin$sample)
# limit the data set to numerical values: rges, ic50 and biomarkers:
rges.ic50.biomarkers <- as.data.frame(cbind(drug_activity_rges.cisplatin[,c(2,9)], biomarker.FC.fit))
View(rges.ic50.biomarkers)
CCLE_basalexpression <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/CCLE_basalexpression.rds")
CCLE_copynumber <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/CCLE_copynumber.rds")
CCLE_mutations <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/CCLE_mutations.rds")
NCI_TPW_gep_treated <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/NCI_TPW_gep_treated.rds")
NCI_TPW_gep_untreated <- readRDS("C:/Users/Dori/Desktop/Studium/SS_19/Bioinfo Projekt/GitHub/project-02-group-02#project-02-group-02/data/NCI_TPW_gep_untreated.rds")
install.packages("VennDiagram")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq")
